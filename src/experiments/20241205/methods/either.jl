using IntervalArithmetic
using IntervalArithmetic.Symbols
using HiGHS
using JuMP

include("../../../utils/ahp/nearly_equal/v1/nearly_equal.jl")
using .NearlyEqual

include("../../../utils/ahp/interval_pcm/v1/interval_pcm.jl")
using .IntervalPCM

include("../../../utils/ahp/twofold_interval/v1/twofold_interval.jl")
using .TwofoldIntervalArithmetic

include("../../../utils/ahp/twofold_interval_pcm/v1/twofold_interval_pcm.jl")
using .TwofoldIntervalPCM

LPResult = @NamedTuple{
    w·¥∏‚Å∫::Vector{T}, w·¥∏‚Åª::Vector{T},
    w·µÅ‚Åª::Vector{T}, w·µÅ‚Å∫::Vector{T},
    optimalValue::T
} where {T<:Real}

function TFIWs_either(
    A::Matrix{Interval{T}}
) where {T<:Real}
    if !isIntervalPCM(A)
        throw(ArgumentError("Given matrix is not valid as an interval matrix."))
    end

    Œµ = 1e-12
    n = size(A, 1)

    model = Model(HiGHS.Optimizer)
    set_silent(model)

    try
        @variable(model, w·¥∏‚Åª[i=1:n] ‚â• Œµ)
        @variable(model, w·µÅ‚Åª[i=1:n] ‚â• Œµ)
        @variable(model, w·¥∏‚Å∫[i=1:n] ‚â• Œµ)
        @variable(model, w·µÅ‚Å∫[i=1:n] ‚â• Œµ)
        @variable(model, w·¥∏‚Åª·¥∏[i=1:n, j=1:n] ‚â• Œµ)
        @variable(model, w·¥∏‚Åª·µÅ[i=1:n, j=1:n] ‚â• Œµ)
        @variable(model, w·¥∏‚Å∫·¥∏[i=1:n, j=1:n] ‚â• Œµ)
        @variable(model, w·¥∏‚Å∫·µÅ[i=1:n, j=1:n] ‚â• Œµ)
        @variable(model, w·µÅ‚Åª·¥∏[i=1:n, j=1:n] ‚â• Œµ)
        @variable(model, w·µÅ‚Åª·µÅ[i=1:n, j=1:n] ‚â• Œµ)
        @variable(model, w·µÅ‚Å∫·¥∏[i=1:n, j=1:n] ‚â• Œµ)
        @variable(model, w·µÅ‚Å∫·µÅ[i=1:n, j=1:n] ‚â• Œµ)

        for i = 1:n
            w·µ¢·¥∏‚Åª = w·¥∏‚Åª[i]
            w·µ¢·µÅ‚Åª = w·µÅ‚Åª[i]
            w·µ¢·¥∏‚Å∫ = w·¥∏‚Å∫[i]
            w·µ¢·µÅ‚Å∫ = w·µÅ‚Å∫[i]
            @constraint(model, w·µ¢·¥∏‚Å∫ ‚â§ w·µ¢·¥∏‚Åª)
            @constraint(model, w·µ¢·¥∏‚Åª ‚â§ w·µ¢·µÅ‚Åª)
            @constraint(model, w·µ¢·µÅ‚Åª ‚â§ w·µ¢·µÅ‚Å∫)

            w·µ¢·¥∏‚Å±‚Åª·µÅ = w·¥∏‚Åª·µÅ[i, i]
            w·µ¢·¥∏‚Å±‚Å∫·µÅ = w·¥∏‚Å∫·µÅ[i, i]
            w·µ¢·µÅ‚Å±‚Åª·¥∏ = w·µÅ‚Åª·¥∏[i, i]
            w·µ¢·µÅ‚Å±‚Å∫·¥∏ = w·µÅ‚Å∫·¥∏[i, i]
            @constraint(model, w·µ¢·¥∏‚Å∫ ‚â§ w·µ¢·µÅ‚Å±‚Åª·¥∏)
            @constraint(model, w·µ¢·µÅ‚Å±‚Åª·¥∏ ‚â§ w·µ¢·¥∏‚Åª)
            @constraint(model, w·µ¢·¥∏‚Å∫ ‚â§ w·µ¢·µÅ‚Å±‚Å∫·¥∏)
            @constraint(model, w·µ¢·µÅ‚Å±‚Å∫·¥∏ ‚â§ w·µ¢·¥∏‚Åª)
            @constraint(model, w·µ¢·µÅ‚Åª ‚â§ w·µ¢·¥∏‚Å±‚Åª·µÅ)
            @constraint(model, w·µ¢·¥∏‚Å±‚Åª·µÅ ‚â§ w·µ¢·µÅ‚Å∫)
            @constraint(model, w·µ¢·µÅ‚Åª ‚â§ w·µ¢·¥∏‚Å±‚Å∫·µÅ)
            @constraint(model, w·µ¢·¥∏‚Å±‚Å∫·µÅ ‚â§ w·µ¢·µÅ‚Å∫)

            ‚àë‚±ºw‚±º·¥∏‚Å±‚Åª·¥∏ = sum(map(j -> w·¥∏‚Åª·¥∏[i, j], filter(j -> i != j, 1:n)))
            ‚àë‚±ºw‚±º·¥∏‚Å±‚Åª·µÅ = sum(map(j -> w·¥∏‚Åª·µÅ[i, j], filter(j -> i != j, 1:n)))
            @constraint(model, w·µ¢·¥∏‚Åª + ‚àë‚±ºw‚±º·¥∏‚Å±‚Åª·µÅ ‚â• 1)
            @constraint(model, w·µ¢·¥∏‚Å±‚Åª·µÅ + ‚àë‚±ºw‚±º·¥∏‚Å±‚Åª·¥∏ ‚â§ 1)

            ‚àë‚±ºw‚±º·¥∏‚Å±‚Å∫·¥∏ = sum(map(j -> w·¥∏‚Å∫·¥∏[i, j], filter(j -> i != j, 1:n)))
            ‚àë‚±ºw‚±º·¥∏‚Å±‚Å∫·µÅ = sum(map(j -> w·¥∏‚Å∫·µÅ[i, j], filter(j -> i != j, 1:n)))
            @constraint(model, w·µ¢·¥∏‚Å∫ + ‚àë‚±ºw‚±º·¥∏‚Å±‚Å∫·µÅ ‚â• 1)
            @constraint(model, w·µ¢·¥∏‚Å±‚Å∫·µÅ + ‚àë‚±ºw‚±º·¥∏‚Å±‚Å∫·¥∏ ‚â§ 1)

            ‚àë‚±ºw‚±º·µÅ‚Å±‚Åª·¥∏ = sum(map(j -> w·µÅ‚Åª·¥∏[i, j], filter(j -> i != j, 1:n)))
            ‚àë‚±ºw‚±º·µÅ‚Å±‚Åª·µÅ = sum(map(j -> w·µÅ‚Åª·µÅ[i, j], filter(j -> i != j, 1:n)))
            @constraint(model, w·µ¢·µÅ‚Å±‚Åª·¥∏ + ‚àë‚±ºw‚±º·µÅ‚Å±‚Åª·µÅ ‚â• 1)
            @constraint(model, w·µ¢·µÅ‚Åª + ‚àë‚±ºw‚±º·µÅ‚Å±‚Åª·¥∏ ‚â§ 1)

            ‚àë‚±ºw‚±º·µÅ‚Å±‚Å∫·¥∏ = sum(map(j -> w·µÅ‚Å∫·¥∏[i, j], filter(j -> i != j, 1:n)))
            ‚àë‚±ºw‚±º·µÅ‚Å±‚Å∫·µÅ = sum(map(j -> w·µÅ‚Å∫·µÅ[i, j], filter(j -> i != j, 1:n)))
            @constraint(model, w·µ¢·µÅ‚Å±‚Å∫·¥∏ + ‚àë‚±ºw‚±º·µÅ‚Å±‚Å∫·µÅ ‚â• 1)
            @constraint(model, w·µ¢·µÅ‚Å∫ + ‚àë‚±ºw‚±º·µÅ‚Å±‚Å∫·¥∏ ‚â§ 1)

            for j = 1:n
                if i == j
                    continue
                end

                w‚±º·¥∏‚Åª = w·¥∏‚Åª[j]
                w‚±º·µÅ‚Åª = w·µÅ‚Åª[j]
                w‚±º·¥∏‚Å∫ = w·¥∏‚Å∫[j]
                w‚±º·µÅ‚Å∫ = w·µÅ‚Å∫[j]

                w‚±º·¥∏‚Å±‚Åª·¥∏ = w·¥∏‚Åª·¥∏[i, j]
                w‚±º·¥∏‚Å±‚Åª·µÅ = w·¥∏‚Åª·µÅ[i, j]
                w‚±º·¥∏‚Å±‚Å∫·¥∏ = w·¥∏‚Å∫·¥∏[i, j]
                w‚±º·¥∏‚Å±‚Å∫·µÅ = w·¥∏‚Å∫·µÅ[i, j]
                w‚±º·µÅ‚Å±‚Åª·¥∏ = w·µÅ‚Åª·¥∏[i, j]
                w‚±º·µÅ‚Å±‚Åª·µÅ = w·µÅ‚Åª·µÅ[i, j]
                w‚±º·µÅ‚Å±‚Å∫·¥∏ = w·µÅ‚Å∫·¥∏[i, j]
                w‚±º·µÅ‚Å±‚Å∫·µÅ = w·µÅ‚Å∫·µÅ[i, j]

                @constraint(model, w‚±º·¥∏‚Å∫ ‚â§ w‚±º·¥∏‚Å±‚Åª·¥∏)
                @constraint(model, w‚±º·¥∏‚Å±‚Åª·¥∏ ‚â§ w‚±º·¥∏‚Åª)
                @constraint(model, w‚±º·¥∏‚Å∫ ‚â§ w‚±º·¥∏‚Å±‚Å∫·¥∏)
                @constraint(model, w‚±º·¥∏‚Å±‚Å∫·¥∏ ‚â§ w‚±º·¥∏‚Åª)
                @constraint(model, w‚±º·¥∏‚Å∫ ‚â§ w‚±º·µÅ‚Å±‚Åª·¥∏)
                @constraint(model, w‚±º·µÅ‚Å±‚Åª·¥∏ ‚â§ w‚±º·¥∏‚Åª)
                @constraint(model, w‚±º·¥∏‚Å∫ ‚â§ w‚±º·µÅ‚Å±‚Å∫·¥∏)
                @constraint(model, w‚±º·µÅ‚Å±‚Å∫·¥∏ ‚â§ w‚±º·¥∏‚Åª)
                @constraint(model, w‚±º·µÅ‚Åª ‚â§ w‚±º·¥∏‚Å±‚Åª·µÅ)
                @constraint(model, w‚±º·¥∏‚Å±‚Åª·µÅ ‚â§ w‚±º·µÅ‚Å∫)
                @constraint(model, w‚±º·µÅ‚Åª ‚â§ w‚±º·¥∏‚Å±‚Å∫·µÅ)
                @constraint(model, w‚±º·¥∏‚Å±‚Å∫·µÅ ‚â§ w‚±º·µÅ‚Å∫)
                @constraint(model, w‚±º·µÅ‚Åª ‚â§ w‚±º·µÅ‚Å±‚Åª·µÅ)
                @constraint(model, w‚±º·µÅ‚Å±‚Åª·µÅ ‚â§ w‚±º·µÅ‚Å∫)
                @constraint(model, w‚±º·µÅ‚Åª ‚â§ w‚±º·µÅ‚Å±‚Å∫·µÅ)
                @constraint(model, w‚±º·µÅ‚Å±‚Å∫·µÅ ‚â§ w‚±º·µÅ‚Å∫)

                ‚àë‚Çñw‚Çñ·¥∏‚Å±‚Åª·¥∏ = sum(map(k -> w·¥∏‚Åª·¥∏[i, k], filter(k -> k != i && k != j, 1:n)))
                ‚àë‚Çñw‚Çñ·¥∏‚Å±‚Åª·µÅ = sum(map(k -> w·¥∏‚Åª·µÅ[i, k], filter(k -> k != i, 1:n)))
                @constraint(model, w‚±º·¥∏‚Å±‚Åª·¥∏ + ‚àë‚Çñw‚Çñ·¥∏‚Å±‚Åª·µÅ ‚â• 1)
                @constraint(model, w‚±º·¥∏‚Å±‚Åª·µÅ + w·µ¢·¥∏‚Åª + ‚àë‚Çñw‚Çñ·¥∏‚Å±‚Åª·¥∏ ‚â§ 1)

                ‚àë‚Çñw‚Çñ·¥∏‚Å±‚Å∫·¥∏ = sum(map(k -> w·¥∏‚Å∫·¥∏[i, k], filter(k -> k != i && k != j, 1:n)))
                ‚àë‚Çñw‚Çñ·¥∏‚Å±‚Å∫·µÅ = sum(map(k -> w·¥∏‚Å∫·µÅ[i, k], filter(k -> k != i, 1:n)))
                @constraint(model, w‚±º·¥∏‚Å±‚Å∫·¥∏ + ‚àë‚Çñw‚Çñ·¥∏‚Å±‚Å∫·µÅ ‚â• 1)
                @constraint(model, w‚±º·¥∏‚Å±‚Å∫·µÅ + w·µ¢·¥∏‚Å∫ + ‚àë‚Çñw‚Çñ·¥∏‚Å±‚Å∫·¥∏ ‚â§ 1)

                ‚àë‚Çñw‚Çñ·µÅ‚Å±‚Åª·¥∏ = sum(map(k -> w·µÅ‚Åª·¥∏[i, k], filter(k -> k != i, 1:n)))
                ‚àë‚Çñw‚Çñ·µÅ‚Å±‚Åª·µÅ = sum(map(k -> w·µÅ‚Åª·µÅ[i, k], filter(k -> k != i && k != j, 1:n)))
                @constraint(model, w‚±º·µÅ‚Å±‚Åª·¥∏ + w·µ¢·µÅ‚Åª + ‚àë‚Çñw‚Çñ·µÅ‚Å±‚Åª·µÅ ‚â• 1)
                @constraint(model, w‚±º·µÅ‚Å±‚Åª·µÅ + ‚àë‚Çñw‚Çñ·µÅ‚Å±‚Åª·¥∏ ‚â§ 1)

                ‚àë‚Çñw‚Çñ·µÅ‚Å±‚Å∫·¥∏ = sum(map(k -> w·µÅ‚Å∫·¥∏[i, k], filter(k -> k != i, 1:n)))
                ‚àë‚Çñw‚Çñ·µÅ‚Å±‚Å∫·µÅ = sum(map(k -> w·µÅ‚Å∫·µÅ[i, k], filter(k -> k != i && k != j, 1:n)))
                @constraint(model, w‚±º·µÅ‚Å±‚Å∫·¥∏ + w·µ¢·µÅ‚Å∫ + ‚àë‚Çñw‚Çñ·µÅ‚Å±‚Å∫·µÅ ‚â• 1)
                @constraint(model, w‚±º·µÅ‚Å±‚Å∫·µÅ + ‚àë‚Çñw‚Çñ·µÅ‚Å±‚Å∫·¥∏ ‚â§ 1)

                a·µ¢‚±º·¥∏ = inf(A[i, j])
                a·µ¢‚±º·µÅ = sup(A[i, j])

                @constraint(model, w·µ¢·¥∏‚Åª ‚â§ a·µ¢‚±º·¥∏ * w‚±º·µÅ‚Åª)
                @constraint(model, w·µ¢·µÅ‚Åª ‚â• a·µ¢‚±º·µÅ * w‚±º·¥∏‚Åª)
                @constraint(model, w·µ¢·¥∏‚Å∫ ‚â• a·µ¢‚±º·¥∏ * w‚±º·µÅ‚Å∫)
                @constraint(model, w·µ¢·µÅ‚Å∫ ‚â§ a·µ¢‚±º·µÅ * w‚±º·¥∏‚Å∫)
            end
        end

        @objective(model, Min, sum(w·¥∏‚Åª) - sum(w·¥∏‚Å∫) + sum(w·µÅ‚Å∫) - sum(w·µÅ‚Åª))

        optimize!(model)

        optimalValue = sum(value.(w·¥∏‚Åª)) - sum(value.(w·¥∏‚Å∫)) + sum(value.(w·µÅ‚Å∫)) - sum(value.(w·µÅ‚Åª))

        ≈µ·¥∏‚Åª = correctPrecisionLoss(value.(w·¥∏‚Åª), value.(w·¥∏‚Å∫))
        ≈µ·µÅ‚Åª = correctPrecisionLoss(value.(w·µÅ‚Åª), value.(≈µ·¥∏‚Åª))
        ≈µ·µÅ‚Å∫ = correctPrecisionLoss(value.(w·µÅ‚Å∫), value.(≈µ·µÅ‚Åª))

        return (
            w·¥∏‚Å∫=value.(w·¥∏‚Å∫), w·¥∏‚Åª=≈µ·¥∏‚Åª,
            w·µÅ‚Åª=≈µ·µÅ‚Åª, w·µÅ‚Å∫=≈µ·µÅ‚Å∫,
            optimalValue=optimalValue
        )
    finally
        empty!(model)
    end
end


function TFIWs_either(
    ùíú::Matrix{TwofoldInterval{T}}
) where {T<:Real}
    if !isTwofoldIntervalPCM(ùíú)
        throw(ArgumentError("Given matrix is not valid as a twofold interval matrix."))
    end

    Œµ = 1e-12
    n = size(ùíú, 1)

    model = Model(HiGHS.Optimizer)
    set_silent(model)

    try
        @variable(model, w·¥∏‚Åª[i=1:n] ‚â• Œµ)
        @variable(model, w·µÅ‚Åª[i=1:n] ‚â• Œµ)
        @variable(model, w·¥∏‚Å∫[i=1:n] ‚â• Œµ)
        @variable(model, w·µÅ‚Å∫[i=1:n] ‚â• Œµ)
        @variable(model, w·¥∏‚Åª·¥∏[i=1:n, j=1:n] ‚â• Œµ)
        @variable(model, w·¥∏‚Åª·µÅ[i=1:n, j=1:n] ‚â• Œµ)
        @variable(model, w·¥∏‚Å∫·¥∏[i=1:n, j=1:n] ‚â• Œµ)
        @variable(model, w·¥∏‚Å∫·µÅ[i=1:n, j=1:n] ‚â• Œµ)
        @variable(model, w·µÅ‚Åª·¥∏[i=1:n, j=1:n] ‚â• Œµ)
        @variable(model, w·µÅ‚Åª·µÅ[i=1:n, j=1:n] ‚â• Œµ)
        @variable(model, w·µÅ‚Å∫·¥∏[i=1:n, j=1:n] ‚â• Œµ)
        @variable(model, w·µÅ‚Å∫·µÅ[i=1:n, j=1:n] ‚â• Œµ)

        for i = 1:n
            w·µ¢·¥∏‚Åª = w·¥∏‚Åª[i]
            w·µ¢·µÅ‚Åª = w·µÅ‚Åª[i]
            w·µ¢·¥∏‚Å∫ = w·¥∏‚Å∫[i]
            w·µ¢·µÅ‚Å∫ = w·µÅ‚Å∫[i]
            @constraint(model, w·µ¢·¥∏‚Å∫ ‚â§ w·µ¢·¥∏‚Åª)
            @constraint(model, w·µ¢·¥∏‚Åª ‚â§ w·µ¢·µÅ‚Åª)
            @constraint(model, w·µ¢·µÅ‚Åª ‚â§ w·µ¢·µÅ‚Å∫)

            w·µ¢·¥∏‚Å±‚Åª·µÅ = w·¥∏‚Åª·µÅ[i, i]
            w·µ¢·¥∏‚Å±‚Å∫·µÅ = w·¥∏‚Å∫·µÅ[i, i]
            w·µ¢·µÅ‚Å±‚Åª·¥∏ = w·µÅ‚Åª·¥∏[i, i]
            w·µ¢·µÅ‚Å±‚Å∫·¥∏ = w·µÅ‚Å∫·¥∏[i, i]
            @constraint(model, w·µ¢·¥∏‚Å∫ ‚â§ w·µ¢·µÅ‚Å±‚Åª·¥∏)
            @constraint(model, w·µ¢·µÅ‚Å±‚Åª·¥∏ ‚â§ w·µ¢·¥∏‚Åª)
            @constraint(model, w·µ¢·¥∏‚Å∫ ‚â§ w·µ¢·µÅ‚Å±‚Å∫·¥∏)
            @constraint(model, w·µ¢·µÅ‚Å±‚Å∫·¥∏ ‚â§ w·µ¢·¥∏‚Åª)
            @constraint(model, w·µ¢·µÅ‚Åª ‚â§ w·µ¢·¥∏‚Å±‚Åª·µÅ)
            @constraint(model, w·µ¢·¥∏‚Å±‚Åª·µÅ ‚â§ w·µ¢·µÅ‚Å∫)
            @constraint(model, w·µ¢·µÅ‚Åª ‚â§ w·µ¢·¥∏‚Å±‚Å∫·µÅ)
            @constraint(model, w·µ¢·¥∏‚Å±‚Å∫·µÅ ‚â§ w·µ¢·µÅ‚Å∫)

            ‚àë‚±ºw‚±º·¥∏‚Å±‚Åª·¥∏ = sum(map(j -> w·¥∏‚Åª·¥∏[i, j], filter(j -> i != j, 1:n)))
            ‚àë‚±ºw‚±º·¥∏‚Å±‚Åª·µÅ = sum(map(j -> w·¥∏‚Åª·µÅ[i, j], filter(j -> i != j, 1:n)))
            @constraint(model, w·µ¢·¥∏‚Åª + ‚àë‚±ºw‚±º·¥∏‚Å±‚Åª·µÅ ‚â• 1)
            @constraint(model, w·µ¢·¥∏‚Å±‚Åª·µÅ + ‚àë‚±ºw‚±º·¥∏‚Å±‚Åª·¥∏ ‚â§ 1)

            ‚àë‚±ºw‚±º·¥∏‚Å±‚Å∫·¥∏ = sum(map(j -> w·¥∏‚Å∫·¥∏[i, j], filter(j -> i != j, 1:n)))
            ‚àë‚±ºw‚±º·¥∏‚Å±‚Å∫·µÅ = sum(map(j -> w·¥∏‚Å∫·µÅ[i, j], filter(j -> i != j, 1:n)))
            @constraint(model, w·µ¢·¥∏‚Å∫ + ‚àë‚±ºw‚±º·¥∏‚Å±‚Å∫·µÅ ‚â• 1)
            @constraint(model, w·µ¢·¥∏‚Å±‚Å∫·µÅ + ‚àë‚±ºw‚±º·¥∏‚Å±‚Å∫·¥∏ ‚â§ 1)

            ‚àë‚±ºw‚±º·µÅ‚Å±‚Åª·¥∏ = sum(map(j -> w·µÅ‚Åª·¥∏[i, j], filter(j -> i != j, 1:n)))
            ‚àë‚±ºw‚±º·µÅ‚Å±‚Åª·µÅ = sum(map(j -> w·µÅ‚Åª·µÅ[i, j], filter(j -> i != j, 1:n)))
            @constraint(model, w·µ¢·µÅ‚Å±‚Åª·¥∏ + ‚àë‚±ºw‚±º·µÅ‚Å±‚Åª·µÅ ‚â• 1)
            @constraint(model, w·µ¢·µÅ‚Åª + ‚àë‚±ºw‚±º·µÅ‚Å±‚Åª·¥∏ ‚â§ 1)

            ‚àë‚±ºw‚±º·µÅ‚Å±‚Å∫·¥∏ = sum(map(j -> w·µÅ‚Å∫·¥∏[i, j], filter(j -> i != j, 1:n)))
            ‚àë‚±ºw‚±º·µÅ‚Å±‚Å∫·µÅ = sum(map(j -> w·µÅ‚Å∫·µÅ[i, j], filter(j -> i != j, 1:n)))
            @constraint(model, w·µ¢·µÅ‚Å±‚Å∫·¥∏ + ‚àë‚±ºw‚±º·µÅ‚Å±‚Å∫·µÅ ‚â• 1)
            @constraint(model, w·µ¢·µÅ‚Å∫ + ‚àë‚±ºw‚±º·µÅ‚Å±‚Å∫·¥∏ ‚â§ 1)

            for j = 1:n
                if i == j
                    continue
                end

                w‚±º·¥∏‚Åª = w·¥∏‚Åª[j]
                w‚±º·µÅ‚Åª = w·µÅ‚Åª[j]
                w‚±º·¥∏‚Å∫ = w·¥∏‚Å∫[j]
                w‚±º·µÅ‚Å∫ = w·µÅ‚Å∫[j]

                w‚±º·¥∏‚Å±‚Åª·¥∏ = w·¥∏‚Åª·¥∏[i, j]
                w‚±º·¥∏‚Å±‚Åª·µÅ = w·¥∏‚Åª·µÅ[i, j]
                w‚±º·¥∏‚Å±‚Å∫·¥∏ = w·¥∏‚Å∫·¥∏[i, j]
                w‚±º·¥∏‚Å±‚Å∫·µÅ = w·¥∏‚Å∫·µÅ[i, j]
                w‚±º·µÅ‚Å±‚Åª·¥∏ = w·µÅ‚Åª·¥∏[i, j]
                w‚±º·µÅ‚Å±‚Åª·µÅ = w·µÅ‚Åª·µÅ[i, j]
                w‚±º·µÅ‚Å±‚Å∫·¥∏ = w·µÅ‚Å∫·¥∏[i, j]
                w‚±º·µÅ‚Å±‚Å∫·µÅ = w·µÅ‚Å∫·µÅ[i, j]

                @constraint(model, w‚±º·¥∏‚Å∫ ‚â§ w‚±º·¥∏‚Å±‚Åª·¥∏)
                @constraint(model, w‚±º·¥∏‚Å±‚Åª·¥∏ ‚â§ w‚±º·¥∏‚Åª)
                @constraint(model, w‚±º·¥∏‚Å∫ ‚â§ w‚±º·¥∏‚Å±‚Å∫·¥∏)
                @constraint(model, w‚±º·¥∏‚Å±‚Å∫·¥∏ ‚â§ w‚±º·¥∏‚Åª)
                @constraint(model, w‚±º·¥∏‚Å∫ ‚â§ w‚±º·µÅ‚Å±‚Åª·¥∏)
                @constraint(model, w‚±º·µÅ‚Å±‚Åª·¥∏ ‚â§ w‚±º·¥∏‚Åª)
                @constraint(model, w‚±º·¥∏‚Å∫ ‚â§ w‚±º·µÅ‚Å±‚Å∫·¥∏)
                @constraint(model, w‚±º·µÅ‚Å±‚Å∫·¥∏ ‚â§ w‚±º·¥∏‚Åª)
                @constraint(model, w‚±º·µÅ‚Åª ‚â§ w‚±º·¥∏‚Å±‚Åª·µÅ)
                @constraint(model, w‚±º·¥∏‚Å±‚Åª·µÅ ‚â§ w‚±º·µÅ‚Å∫)
                @constraint(model, w‚±º·µÅ‚Åª ‚â§ w‚±º·¥∏‚Å±‚Å∫·µÅ)
                @constraint(model, w‚±º·¥∏‚Å±‚Å∫·µÅ ‚â§ w‚±º·µÅ‚Å∫)
                @constraint(model, w‚±º·µÅ‚Åª ‚â§ w‚±º·µÅ‚Å±‚Åª·µÅ)
                @constraint(model, w‚±º·µÅ‚Å±‚Åª·µÅ ‚â§ w‚±º·µÅ‚Å∫)
                @constraint(model, w‚±º·µÅ‚Åª ‚â§ w‚±º·µÅ‚Å±‚Å∫·µÅ)
                @constraint(model, w‚±º·µÅ‚Å±‚Å∫·µÅ ‚â§ w‚±º·µÅ‚Å∫)

                ‚àë‚Çñw‚Çñ·¥∏‚Å±‚Åª·¥∏ = sum(map(k -> w·¥∏‚Åª·¥∏[i, k], filter(k -> k != i && k != j, 1:n)))
                ‚àë‚Çñw‚Çñ·¥∏‚Å±‚Åª·µÅ = sum(map(k -> w·¥∏‚Åª·µÅ[i, k], filter(k -> k != i, 1:n)))
                @constraint(model, w‚±º·¥∏‚Å±‚Åª·¥∏ + ‚àë‚Çñw‚Çñ·¥∏‚Å±‚Åª·µÅ ‚â• 1)
                @constraint(model, w‚±º·¥∏‚Å±‚Åª·µÅ + w·µ¢·¥∏‚Åª + ‚àë‚Çñw‚Çñ·¥∏‚Å±‚Åª·¥∏ ‚â§ 1)

                ‚àë‚Çñw‚Çñ·¥∏‚Å±‚Å∫·¥∏ = sum(map(k -> w·¥∏‚Å∫·¥∏[i, k], filter(k -> k != i && k != j, 1:n)))
                ‚àë‚Çñw‚Çñ·¥∏‚Å±‚Å∫·µÅ = sum(map(k -> w·¥∏‚Å∫·µÅ[i, k], filter(k -> k != i, 1:n)))
                @constraint(model, w‚±º·¥∏‚Å±‚Å∫·¥∏ + ‚àë‚Çñw‚Çñ·¥∏‚Å±‚Å∫·µÅ ‚â• 1)
                @constraint(model, w‚±º·¥∏‚Å±‚Å∫·µÅ + w·µ¢·¥∏‚Å∫ + ‚àë‚Çñw‚Çñ·¥∏‚Å±‚Å∫·¥∏ ‚â§ 1)

                ‚àë‚Çñw‚Çñ·µÅ‚Å±‚Åª·¥∏ = sum(map(k -> w·µÅ‚Åª·¥∏[i, k], filter(k -> k != i, 1:n)))
                ‚àë‚Çñw‚Çñ·µÅ‚Å±‚Åª·µÅ = sum(map(k -> w·µÅ‚Åª·µÅ[i, k], filter(k -> k != i && k != j, 1:n)))
                @constraint(model, w‚±º·µÅ‚Å±‚Åª·¥∏ + w·µ¢·µÅ‚Åª + ‚àë‚Çñw‚Çñ·µÅ‚Å±‚Åª·µÅ ‚â• 1)
                @constraint(model, w‚±º·µÅ‚Å±‚Åª·µÅ + ‚àë‚Çñw‚Çñ·µÅ‚Å±‚Åª·¥∏ ‚â§ 1)

                ‚àë‚Çñw‚Çñ·µÅ‚Å±‚Å∫·¥∏ = sum(map(k -> w·µÅ‚Å∫·¥∏[i, k], filter(k -> k != i, 1:n)))
                ‚àë‚Çñw‚Çñ·µÅ‚Å±‚Å∫·µÅ = sum(map(k -> w·µÅ‚Å∫·µÅ[i, k], filter(k -> k != i && k != j, 1:n)))
                @constraint(model, w‚±º·µÅ‚Å±‚Å∫·¥∏ + w·µ¢·µÅ‚Å∫ + ‚àë‚Çñw‚Çñ·µÅ‚Å±‚Å∫·µÅ ‚â• 1)
                @constraint(model, w‚±º·µÅ‚Å±‚Å∫·µÅ + ‚àë‚Çñw‚Çñ·µÅ‚Å±‚Å∫·¥∏ ‚â§ 1)

                ùíú·µ¢‚±º‚Åª = inner(ùíú[i, j])
                a·µ¢‚±º·¥∏‚Åª = inf(ùíú·µ¢‚±º‚Åª)
                a·µ¢‚±º·µÅ‚Åª = sup(ùíú·µ¢‚±º‚Åª)
                ùíú·µ¢‚±º‚Å∫ = outer(ùíú[i, j])
                a·µ¢‚±º·¥∏‚Å∫ = inf(ùíú·µ¢‚±º‚Å∫)
                a·µ¢‚±º·µÅ‚Å∫ = sup(ùíú·µ¢‚±º‚Å∫)

                @constraint(model, w·µ¢·¥∏‚Åª ‚â§ a·µ¢‚±º·¥∏ * w‚±º·µÅ‚Åª)
                @constraint(model, w·µ¢·µÅ‚Åª ‚â• a·µ¢‚±º·µÅ * w‚±º·¥∏‚Åª)
                @constraint(model, w·µ¢·¥∏‚Å∫ ‚â• a·µ¢‚±º·¥∏ * w‚±º·µÅ‚Å∫)
                @constraint(model, w·µ¢·µÅ‚Å∫ ‚â§ a·µ¢‚±º·µÅ * w‚±º·¥∏‚Å∫)
            end
        end

        @objective(model, Min, sum(w·¥∏‚Åª) - sum(w·¥∏‚Å∫) + sum(w·µÅ‚Å∫) - sum(w·µÅ‚Åª))

        optimize!(model)

        optimalValue = sum(value.(w·¥∏‚Åª)) - sum(value.(w·¥∏‚Å∫)) + sum(value.(w·µÅ‚Å∫)) - sum(value.(w·µÅ‚Åª))

        ≈µ·¥∏‚Åª = correctPrecisionLoss(value.(w·¥∏‚Åª), value.(w·¥∏‚Å∫))
        ≈µ·µÅ‚Åª = correctPrecisionLoss(value.(w·µÅ‚Åª), value.(≈µ·¥∏‚Åª))
        ≈µ·µÅ‚Å∫ = correctPrecisionLoss(value.(w·µÅ‚Å∫), value.(≈µ·µÅ‚Åª))

        return (
            w·¥∏‚Å∫=value.(w·¥∏‚Å∫), w·¥∏‚Åª=≈µ·¥∏‚Åª,
            w·µÅ‚Åª=≈µ·µÅ‚Åª, w·µÅ‚Å∫=≈µ·µÅ‚Å∫,
            optimalValue=optimalValue
        )
    finally
        empty!(model)
    end
end
