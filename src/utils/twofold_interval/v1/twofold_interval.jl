# This file is auto-generated from twofold_interval.jmd.
# Do not edit this file manually.

module TwofoldIntervalArithmetic

using IntervalArithmetic
using IntervalArithmetic.Symbols

include("../../nearly_equal/v1/nearly_equal.jl")

using .NearlyEqual

const TwofoldInterval{T} = Tuple{Interval{T}, Interval{T}} where {T <: Real}

"""
    isTwofoldInterval(A;
        allow_uncommon_inner_interval=true,
        strict=false)

Check if `A` is a twofold interval.
"""
@inline function isTwofoldInterval(
        A::TwofoldInterval;
        allow_uncommon_inner_interval::Bool=true,
        strict::Bool=false
)::Bool
    # Check if outer interval is common
    if !iscommon(A[2]) return false end

    # Check if inner interval is common
    if !iscommon(A[1])
        if allow_uncommon_inner_interval
            return true
        else
            return false
        end
    end

    aᴸ⁻ = inf(A[1]); aᵁ⁻ = sup(A[1])
    aᴸ⁺ = inf(A[2]); aᵁ⁺ = sup(A[2])

    # aᴸ⁻ ≈ aᴸ⁺ is allowed (but should be corrected)
    if aᴸ⁻ < aᴸ⁺ && (strict || !isNearlyEqual(aᴸ⁻, aᴸ⁺)) return false end
    # aᵁ⁻ ≈ aᵁ⁺ is allowed (but should be corrected)
    if aᵁ⁻ > aᵁ⁺ && (strict || !isNearlyEqual(aᵁ⁻, aᵁ⁺)) return false end

    return true
end

"""
    inner(A)

Get inner interval of twofold interval `A`.
"""
@inline inner(A::TwofoldInterval)::Interval = A[1]

"""
    outer(A)

Get outer interval of twofold interval `A`.
"""
@inline outer(A::TwofoldInterval)::Interval = A[2]

export TwofoldInterval, isTwofoldInterval, inner, outer

end
