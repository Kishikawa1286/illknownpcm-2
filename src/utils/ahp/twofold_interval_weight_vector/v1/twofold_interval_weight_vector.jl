# This file is auto-generated from twofold_interval_weight_vector.jmd.
# Do not edit this file manually.

module TwofoldIntervalWeightVector

import Base: ∈, ∋
using IntervalArithmetic

include("../../nearly_equal/v1/nearly_equal.jl")
using .NearlyEqual

include("../../twofold_interval/v1/twofold_interval.jl")
using .TwofoldIntervalArithmetic
import .TwofoldIntervalArithmetic: inner, outer

"""
    TwofoldIntervalWeightVector(
        𝒲;
        allow_uncommon_inner_interval=true,
        strict=false
    )

Check whether `𝒲` is a twofold interval weight vector or not.
"""
@inline function isTwofoldIntervalWeightVector(
    𝒲::Vector{TwofoldInterval{T}};
    allow_uncommon_inner_interval=true,
    strict=false,
)::Bool where {T<:Real}
    n = length(𝒲)

    for i in 1:n
        𝒲ᵢ = 𝒲[i]
        if !isTwofoldInterval(
            𝒲ᵢ;
            allow_uncommon_inner_interval=allow_uncommon_inner_interval,
            strict=strict,
        )
            return false
        end
    end

    return true
end

export isTwofoldIntervalWeightVector

"""
    isincluded(W, 𝒲; strict=false)

Check whether interval vector `W` is included in twofold interval vector `𝒲`.
"""
function isincluded(
    W::Vector{Interval{T}},
    𝒲::Vector{TwofoldInterval{T}};
    strict=false
)::Bool where {T<:Real}
    n = length(W)

    for i = 1:n
        Wᵢ = W[i]
        𝒲ᵢ = 𝒲[i]
        if !TwofoldIntervalArithmetic.isincluded(Wᵢ, 𝒲ᵢ; strict=strict)
            return false
        end
    end

    return true
end

"""
    ∈(W, 𝒲)

Unicode alias for `isincluded(W, 𝒲)`.
"""
∈(W::Vector{Interval}, 𝒲::Vector{TwofoldInterval})::Bool = isincluded(W, 𝒲)

"""
    ∋(𝒲, W)

Unicode alias for `isincluded(W, 𝒲)`.
"""
∋(W::Vector{Interval}, 𝒲::Vector{TwofoldInterval})::Bool = isincluded(W, 𝒲)

export isincluded, ∈, ∋

end
