# This file is auto-generated from twofold_interval.jmd.
# Do not edit this file manually.

module TwofoldIntervalArithmetic

import Base: ∈, ∋, ⊆, ⊇
using IntervalArithmetic
using IntervalArithmetic.Symbols

include("../../nearly_equal/v1/nearly_equal.jl")
using .NearlyEqual

const TwofoldInterval = Tuple{Interval{T},Interval{T}} where {T<:Real}

"""
    isTwofoldInterval(
        𝒜;
        allow_uncommon_inner_interval=true,
        strict=false
    )

Check whether `𝒜` is a twofold interval.
"""
@inline function isTwofoldInterval(
    𝒜::TwofoldInterval;
    allow_uncommon_inner_interval::Bool=true,
    strict::Bool=false
)::Bool
    𝒜⁻ = inner(𝒜)
    𝒜⁺ = outer(𝒜)

    # Check if outer interval is common
    if !iscommon(𝒜⁺)
        return false
    end

    # Check if inner interval is common
    if !iscommon(𝒜⁻)
        if allow_uncommon_inner_interval
            return true
        else
            return false
        end
    end

    αᴸ⁻ = inf(𝒜⁻)
    αᵁ⁻ = sup(𝒜⁻)
    αᴸ⁺ = inf(𝒜⁺)
    αᵁ⁺ = sup(𝒜⁺)

    # aᴸ⁻ ≈ aᴸ⁺ is allowed (but should be corrected)
    if αᴸ⁻ < αᴸ⁺ && (strict || !isNearlyEqual(αᴸ⁻, αᴸ⁺))
        return false
    end
    # aᵁ⁻ ≈ aᵁ⁺ is allowed (but should be corrected)
    if αᵁ⁻ > αᵁ⁺ && (strict || !isNearlyEqual(αᵁ⁻, αᵁ⁺))
        return false
    end

    return true
end

export TwofoldInterval, isTwofoldInterval

"""
    isincluded(A, 𝒜; strict=false)

Check whether `A` is included in `𝒜`.
Throw an `ArgumentError` if `𝒜` is not a twofold interval.
"""
@inline function isincluded(
    A::Interval{T},
    𝒜::TwofoldInterval{T};
    strict::Bool=false
)::Bool where {T<:Real}
    if !isTwofoldInterval(𝒜; strict=strict)
        throw(ArgumentError("𝒜 is not a twofold interval"))
    end

    tolerance = strict ? 1e-10 : 1e-6

    𝒜⁻ = inner(𝒜)
    𝒜⁺ = outer(𝒜)
    aᴸ = inf(A)
    aᵁ = sup(A)
    αᴸ⁻ = inf(𝒜⁻)
    αᵁ⁻ = sup(𝒜⁻)
    αᴸ⁺ = inf(𝒜⁺)
    αᵁ⁺ = sup(𝒜⁺)

    if αᴸ⁺ ≤ aᴸ ≤ αᴸ⁻ &&
       αᵁ⁻ ≤ aᵁ ≤ αᵁ⁺
        return true
    end

    if (isNearlyEqual(aᴸ, αᴸ⁺; tolerance=tolerance) ||
        isNearlyEqual(aᴸ, αᴸ⁻; tolerance=tolerance)) &&
       (isNearlyEqual(aᵁ, αᵁ⁺; tolerance=tolerance) ||
        isNearlyEqual(aᵁ, αᵁ⁻; tolerance=tolerance))
        return true
    end

    return false
end

"""
    ∈(A, 𝒜)

Unicode alias for `isincluded(A, 𝒜)`.
"""
∈(A::Interval, 𝒜::TwofoldInterval)::Bool = isincluded(A, 𝒜)

"""
    ∋(𝒜, A)

Unicode alias for `isincluded(A, 𝒜)`.
"""
∋(𝒜::TwofoldInterval, A::Interval)::Bool = isincluded(A, 𝒜)

export isincluded, ∈, ∋

"""
    isincluded(𝒜, ℬ; strict=false)

Check whether `𝒜` is included in `ℬ`.
Throw an `ArgumentError` if `𝒜` and `ℬ` is not a twofold interval.
"""
@inline function isincluded(
    𝒜::TwofoldInterval{T},
    ℬ::TwofoldInterval{T};
    strict::Bool=false
)::Bool where {T<:Real}
    if !isTwofoldInterval(𝒜; strict=strict)
        throw(ArgumentError("𝒜 is not a twofold interval"))
    end
    if !isTwofoldInterval(ℬ; strict=strict)
        throw(ArgumentError("ℬ is not a twofold interval"))
    end

    tolerance = strict ? 1e-10 : 1e-6

    𝒜⁻ = inner(𝒜)
    𝒜⁺ = outer(𝒜)
    αᴸ⁻ = inf(𝒜⁻)
    αᵁ⁻ = sup(𝒜⁻)
    αᴸ⁺ = inf(𝒜⁺)
    αᵁ⁺ = sup(𝒜⁺)
    ℬ⁻ = inner(ℬ)
    ℬ⁺ = outer(ℬ)
    βᴸ⁻ = inf(ℬ⁻)
    βᵁ⁻ = sup(ℬ⁻)
    βᴸ⁺ = inf(ℬ⁺)
    βᵁ⁺ = sup(ℬ⁺)

    if (βᴸ⁺ ≤ αᴸ⁺ || isNearlyEqual(βᴸ⁺, αᴸ⁺; tolerance=tolerance)) &&
       (αᴸ⁻ ≤ βᴸ⁻ || isNearlyEqual(αᴸ⁻, βᴸ⁻; tolerance=tolerance)) &&
       (βᵁ⁻ ≤ αᵁ⁻ || isNearlyEqual(βᵁ⁻, αᵁ⁻; tolerance=tolerance)) &&
       (αᵁ⁺ ≤ βᵁ⁺ || isNearlyEqual(αᵁ⁺, βᵁ⁺; tolerance=tolerance))
        return true
    end

    return false
end

"""
    ⊆(𝒜, ℬ)

Unicode alias for `isincluded(𝒜, ℬ)`.
"""
⊆(𝒜::TwofoldInterval, ℬ::TwofoldInterval)::Bool = isincluded(𝒜, ℬ)

"""
    ⊇(ℬ, 𝒜)

Unicode alias for `isincluded(𝒜, ℬ)`.
"""
⊇(ℬ::TwofoldInterval, 𝒜::TwofoldInterval)::Bool = isincluded(𝒜, ℬ)

export isincluded, ⊆, ⊇

"""
    inner(A)

Get inner interval of twofold interval `A`.
"""
inner(A::TwofoldInterval)::Interval = A[1]

"""
    inner(𝒲)

Get the inner intervals of twofold interval vector `𝒲`.
"""
function inner(𝒲::Vector{TwofoldInterval})::Vector{Interval}
    return [inner(𝒲ᵢ) for 𝒲ᵢ in 𝒲]
end

"""
    inner(𝒜)

Extract the interval matrix consisting of the inner intervals of the each element of the twofold interval matrix `𝒜`.
"""
function inner(
    𝒜::Matrix{TwofoldInterval{T}}
)::Matrix{Interval{T}} where {T<:Real}
    m, n = size(𝒜)
    𝒜⁻ = Matrix{Interval}(undef, m, n)

    for i = 1:m, j = 1:n
        𝒜⁻[i, j] = 𝒜[i, j][1]
    end

    return 𝒜⁻
end

"""
    outer(A)

Get outer interval of twofold interval `A`.
"""
outer(A::TwofoldInterval)::Interval = A[2]

"""
    outer(𝒲)

Get the outer intervals of twofold interval vector `𝒲`.
"""
function outer(𝒲::Vector{TwofoldInterval})::Vector{Interval}
    return [outer(𝒲ᵢ) for 𝒲ᵢ in 𝒲]
end

"""
    outer(𝒜)

Extract the interval matrix consisting of the outer intervals of the each element of the twofold interval matrix `𝒜`.
"""
function outer(
    𝒜::Matrix{TwofoldInterval{T}}
)::Matrix{Interval{T}} where {T<:Real}
    m, n = size(𝒜)
    𝒜⁺ = Matrix{Interval}(undef, m, n)

    for i = 1:m, j = 1:n
        𝒜⁺[i, j] = 𝒜[i, j][2]
    end

    return 𝒜⁺
end

export inner, outer

end
