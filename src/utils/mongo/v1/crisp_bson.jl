module CrispBSON

using JSON3

include("bson_base.jl")
using .BSON

"""
    crispBson(data; id)

Returns a BSON object from a crisp matrix.
"""
function crispBson(
    data::AbstractMatrix{T};
    id::String
) where {T<:Real}
    float64Data = convert(Matrix{Float64}, data)
    jsonData = JSON3.write(float64Data)
    return bson(
        Dict(
            "_id" => id,
            "type" => "crispMatrix",
            "rows" => size(float64Data, 1),
            "cols" => size(float64Data, 2),
            "data" => jsonData
        )
    )
end

"""
    crispBson(data; id)

Returns a BSON object from a crisp vector.
"""
function crispBson(
    data::AbstractVector{T};
    id::String
) where {T<:Real}
    float64Data = convert(Vector{Float64}, data)
    jsonData = JSON3.write(float64Data)
    return bson(
        Dict(
            "_id" => id,
            "type" => "crispVector",
            "length" => length(float64Data),
            "data" => jsonData
        )
    )
end

"""
    parseCrispMatrixBson(bson)

Returns a crisp matrix from a BSON object generated by `crispBson`.
"""
function parseCrispMatrixBson(bson)::Matrix{Float64}
    rows = bson["rows"]
    cols = bson["cols"]
    data = JSON3.read(bson["data"])
    return reshape(data, rows, cols)
end

"""
    parseCrispVectorBson(bson)

Returns a crisp vector from a BSON object generated by `crispBson`.
"""
function parseCrispVectorBson(bson)::Vector{Float64}
    length = bson["length"]
    data = JSON3.read(bson["data"])
    return reshape(data, length)
end

"""
    parseCrispBson(bson)

Returns a crisp matrix or vector from a BSON object generated by `crispBson`.
"""
function parseCrispBson(
    bson
)::Union{Matrix{Float64},Vector{Float64}}
    type = bson["type"]
    if type == "crispMatrix"
        return parseCrispMatrixBson(bson)
    elseif type == "crispVector"
        return parseCrispVectorBson(bson)
    end
    throw(ArgumentError("Unknown BSON type: $type"))
end

export crispBson, parseCrispBson

end
