module IntervalBSON

using JSON3
using IntervalArithmetic
using IntervalArithmetic.Symbols

include("bson_base.jl")
using .BSON

function encodeInterval(
    x::Interval{T}
)::Union{Vector{Float64},String} where {T<:Real}
    if iscommon(x)
        return [Float64(inf(x)), Float64(sup(x))]
    end

    return "empty"
end

function decodeInterval(
    x::Union{JSON3.Array,String}
)::Interval{Float64}
    if x == "empty"
        return emptyinterval()
    end

    if length(x) != 2
        throw(ArgumentError("Array length must be 2"))
    end

    return interval(x[1], x[2])
end

export encodeInterval, decodeInterval

"""
    intervalBson(data; id)

Returns a BSON object from an interval matrix.
"""
function intervalBson(
    data::AbstractMatrix{Interval{T}};
    id::String
) where {T<:Real}
    intervalData = [encodeInterval(x) for x in data]
    jsonData = JSON3.write(intervalData)
    return bson(
        Dict(
            "_id" => id,
            "type" => "intervalMatrix",
            "rows" => size(data, 1),
            "cols" => size(data, 2),
            "data" => jsonData
        )
    )
end

"""
    intervalBson(data; id)

Returns a BSON object from an interval vector.
"""
function intervalBson(
    data::AbstractVector{Interval{T}};
    id::String
) where {T<:Real}
    intervalData = [
        encodeInterval(x) for x in data]
    jsonData = JSON3.write(intervalData)
    return bson(
        Dict(
            "_id" => id,
            "type" => "intervalVector",
            "length" => length(data),
            "data" => jsonData
        )
    )
end

"""
    parseIntervalMatrixBson(bson)

Returns an interval matrix from a BSON object generated by `intervalBson`.
"""
function parseIntervalMatrixBson(
    bson
)::Matrix{Interval{Float64}}
    rows = bson["rows"]
    cols = bson["cols"]
    data = JSON3.read(bson["data"])
    return reshape(
        [decodeInterval(x) for x in data], rows, cols)
end

"""
    parseIntervalVectorBson(bson)

Returns an interval vector from a BSON object generated by `intervalBson`.
"""
function parseIntervalVectorBson(
    bson
)::Vector{Interval{Float64}}
    length = bson["length"]
    data = JSON3.read(bson["data"])
    return [decodeInterval(data[i]) for i in 1:length]
end

"""
    parseIntervalBson(bson)

Returns an interval matrix or vector from a BSON object generated by `intervalBson`.
"""
function parseIntervalBson(
    bson
)::Union{Matrix{Interval{Float64}},Vector{Interval{Float64}}}
    type = bson["type"]

    if type == "intervalMatrix"
        return parseIntervalMatrixBson(bson)
    end

    if type == "intervalVector"
        return parseIntervalVectorBson(bson)
    end

    throw(ArgumentError("Unknown BSON type: $type"))
end

export intervalBson, parseIntervalBson

end
