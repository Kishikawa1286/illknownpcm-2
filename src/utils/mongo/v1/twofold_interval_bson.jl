module TwofoldIntervalBSON

using JSON3
using IntervalArithmetic
using IntervalArithmetic.Symbols

include("bson_base.jl")
using .BSON

include("interval_bson.jl")
using .IntervalBSON

const TwofoldInterval = Tuple{Interval{T},Interval{T}} where {T<:Real}

function encodeTwofoldInterval(
    x::TwofoldInterval{T}
)::Vector{Union{Vector{Float64},String}} where {T<:Real}
    return [
        encodeInterval(x[1]),
        encodeInterval(x[2])
    ]
end

function decodeTwofoldInterval(
    x::JSON3.Array
)::TwofoldInterval{Float64}
    if length(x) != 2
        throw(ArgumentError("Array length must be 2"))
    end

    return (
        decodeInterval(x[1]),
        decodeInterval(x[2])
    )
end

"""
    twofoldIntervalBson(data; id)

Returns a BSON object from a twofold interval matrix.
"""
function twofoldIntervalBson(
    data::AbstractMatrix{TwofoldInterval{T}};
    id::String
) where {T<:Real}
    twofoldIntervalData = [encodeTwofoldInterval(x) for x in data]
    jsonData = JSON3.write(twofoldIntervalData)
    return bson(
        Dict(
            "_id" => id,
            "type" => "twofoldIntervalMatrix",
            "rows" => size(data, 1),
            "cols" => size(data, 2),
            "data" => jsonData
        )
    )
end

"""
    twofoldIntervalBson(data; id)

Returns a BSON object from a twofold interval vector.
"""
function twofoldIntervalBson(
    data::AbstractVector{TwofoldInterval{T}};
    id::String
) where {T<:Real}
    twofoldIntervalData = [encodeTwofoldInterval(x) for x in data]
    jsonData = JSON3.write(twofoldIntervalData)
    return bson(
        Dict(
            "_id" => id,
            "type" => "twofoldIntervalVector",
            "length" => length(data),
            "data" => jsonData
        )
    )
end

"""
    parseTwofoldIntervalMatrixBson(bson)

Returns a twofold interval matrix from a BSON object generated by `twofoldIntervalBson`.
"""
function parseTwofoldIntervalMatrixBson(
    bson
)::Matrix{TwofoldInterval{Float64}}
    rows = bson["rows"]
    cols = bson["cols"]
    data = JSON3.read(bson["data"])
    return reshape(
        [decodeTwofoldInterval(x) for x in data], rows, cols)
end

"""
    parseTwofoldIntervalVectorBson(bson)

Returns a twofold interval vector from a BSON object generated by `twofoldIntervalBson`.
"""
function parseTwofoldIntervalVectorBson(
    bson
)::Vector{TwofoldInterval{Float64}}
    data = JSON3.read(bson["data"])
    return [decodeTwofoldInterval(x) for x in data]
end

"""
    parseTwofoldIntervalBson(bson)

Returns a twofold interval matrix or vector from a BSON object generated by `twofoldIntervalBson`.
"""
function parseTwofoldIntervalBson(bson)
    type = bson["type"]

    if type == "twofoldIntervalMatrix"
        return parseTwofoldIntervalMatrixBson(bson)
    end

    if type == "twofoldIntervalVector"
        return parseTwofoldIntervalVectorBson(bson)
    end

    throw(ArgumentError("Unknown BSON type: $type"))
end

export twofoldIntervalBson, parseTwofoldIntervalBson

end
