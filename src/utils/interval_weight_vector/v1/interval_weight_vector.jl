# This file is auto-generated from interval_weight_vector.jmd.
# Do not edit this file manually.

module IntervalWeightVector

using IntervalArithmetic
using IntervalArithmetic.Symbols

"""
    isIntervalWeightVector(W)

Check whether `W` is an interval weight vector.
"""
function isIntervalWeightVector(
    W::Vector{Interval{T}}
)::Bool where {T <: Real}
    n = length(W)

    for i in 1:n
        Wᵢ = W[i]
        if !iscommon(Wᵢ) return false end
        wᵢᴸ = inf(Wᵢ)
        if wᵢᴸ <= 0 return false end
    end

    return true
end

"""
    isNormalizedIntervalWeightVector(W)

Check whether `W` is a normalized interval weight vector.
"""
function isNormalizedIntervalWeightVector(
    W::Vector{Interval{T}}
)::Bool where {T <: Real}
    n = length(W)
    if !isIntervalWeightVector(W) return false end

    for i in 1:n
        wᵢᴸ = inf(W[i]); wᵢᵁ = sup(W[i])

        Σⱼwⱼᴸ = 0; Σⱼwⱼᵁ = 0
        for j in 1:n
            if i == j continue end
            wⱼᴸ = inf(W[j]); wⱼᵁ = sup(W[j])
            Σⱼwⱼᴸ += wⱼᴸ; Σⱼwⱼᵁ += wⱼᵁ
        end

        if Σⱼwⱼᵁ + wᵢᴸ < 1 return false end
        if Σⱼwⱼᴸ + wᵢᵁ > 1 return false end
    end

    return true
end

export isIntervalWeightVector, isNormalizedIntervalWeightVector

end
