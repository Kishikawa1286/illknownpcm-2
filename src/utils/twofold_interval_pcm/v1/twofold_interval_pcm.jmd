# TwofoldIntervalPCM

```julia
using IntervalArithmetic
using IntervalArithmetic.Symbols

include("../../nearly_equal/v1/nearly_equal.jl")
using .NearlyEqual

include("../../twofold_interval/v1/twofold_interval.jl")
using .TwofoldIntervalArithmetic
```

## 二重区間 PCM の定義

$$
\mathscr{A}
= \left( \left( \mathscr{A}_{ij}^-, \mathscr{A}_{ij}^+ \right) \right)_{n \times n}
= \left( \left( \left[
    \alpha^{\mathrm{L}-}, \alpha^{\mathrm{U}-}
\right], \left[
    \alpha^{\mathrm{L}+}, \alpha^{\mathrm{U}+}
\right] \right) \right)_{n \times n}
$$

- $n \times n$ 行列
- $\mathscr{A}_{ij}^- \subseteq \mathscr{A}_{ij}^+ ~~ (\alpha_{ij}^{\mathrm{L}+} \leq \alpha_{ij}^{\mathrm{L}-}, ~ \alpha_{ij}^{\mathrm{U}-} \leq \alpha_{ij}^{\mathrm{U}+}), ~ i, j \in N$
- $\alpha_{ij}^{\mathrm{L}+} > 0, ~ i, j \in N$
- $\mathscr{A}_{ii}^- = \mathscr{A}_{ii}^+ = [1, 1], ~ i \in N$
- $\alpha_{ij}^{\mathrm{L}-} = 1/\alpha_{ji}^{\mathrm{U}-}, ~ \alpha_{ij}^{\mathrm{L}+} = 1/\alpha_{ji}^{\mathrm{U}+}, ~ i, j \in N$

```julia
"""
    isTwofoldIntervalPCM(𝒜;
        allow_uncommon_inner_interval=true,
        strict=false)

Check if the matrix `𝒜` is a twofold interval PCM.
"""
@inline function isTwofoldIntervalPCM(
    𝒜::Matrix{TwofoldInterval{T}};
    allow_uncommon_inner_interval::Bool=true,
    strict::Bool=false
)::Bool where {T <: Real}
    m, n = size(𝒜)
    # Check if the matrix is square
    if m != n return false end

    𝒜⁻ = inner(𝒜); 𝒜⁺ = outer(𝒜)

    for i = 1:n, j = 1:n
        if !isTwofoldInterval(𝒜[i, j];
            allow_uncommon_inner_interval=allow_uncommon_inner_interval,
            strict=strict
        ) return false end

        𝒜ᵢⱼ⁻ = 𝒜⁻[i, j]; 𝒜ᵢⱼ⁺ = 𝒜⁺[i, j]

        # If the inner interval of 𝒜ᵢⱼ⁻ is ∅
        if !iscommon(𝒜ᵢⱼ⁻)
            # 𝒜ᵢᵢ⁻ must be [1,1]
            if i == j return false end

            αᵢⱼᴸ⁺ = inf(𝒜ᵢⱼ⁺); αᵢⱼᵁ⁺ = sup(𝒜ᵢⱼ⁺)
            𝒜ⱼᵢ⁺ = 𝒜⁺[j, i]
            αⱼᵢᴸ⁺ = inf(𝒜ⱼᵢ⁺); αⱼᵢᵁ⁺ = sup(𝒜ⱼᵢ⁺)

            # Check reciprocity
            if strict
                if !isNearlyEqual(αᵢⱼᴸ⁺, 1 / αⱼᵢᵁ⁺, tolerance=1e-10) return false end
                if !isNearlyEqual(αᵢⱼᵁ⁺, 1 / αⱼᵢᴸ⁺, tolerance=1e-10) return false end
            else
                if !isNearlyEqual(αᵢⱼᴸ⁺, 1 / αⱼᵢᵁ⁺) return false end
                if !isNearlyEqual(αᵢⱼᵁ⁺, 1 / αⱼᵢᴸ⁺) return false end
            end

            continue
        end

        αᵢⱼᴸ⁻ = inf(𝒜ᵢⱼ⁻); αᵢⱼᵁ⁻ = sup(𝒜ᵢⱼ⁻)
        αᵢⱼᴸ⁺ = inf(𝒜ᵢⱼ⁺); αᵢⱼᵁ⁺ = sup(𝒜ᵢⱼ⁺)

        # Check whether the diagonal elements are ([1,1], [1,1])
        if i == j
            if !isNearlyEqual(αᵢⱼᴸ⁻, 1.0, tolerance=1e-10) return false end
            if !isNearlyEqual(αᵢⱼᵁ⁻, 1.0, tolerance=1e-10) return false end
            if !isNearlyEqual(αᵢⱼᴸ⁺, 1.0, tolerance=1e-10) return false end
            if !isNearlyEqual(αᵢⱼᵁ⁺, 1.0, tolerance=1e-10) return false end
            continue
        end

        𝒜ⱼᵢ⁻ = 𝒜⁻[j, i]; 𝒜ⱼᵢ⁺ = 𝒜⁺[j, i]
        αⱼᵢᴸ⁻ = inf(𝒜ⱼᵢ⁻); αⱼᵢᵁ⁻ = sup(𝒜ⱼᵢ⁻)
        αⱼᵢᴸ⁺ = inf(𝒜ⱼᵢ⁺); αⱼᵢᵁ⁺ = sup(𝒜ⱼᵢ⁺)

        # Check reciprocity
        if strict
            if !isNearlyEqual(αᵢⱼᴸ⁻, 1 / αⱼᵢᵁ⁻, tolerance=1e-10) return false end
            if !isNearlyEqual(αᵢⱼᵁ⁻, 1 / αⱼᵢᴸ⁻, tolerance=1e-10) return false end
            if !isNearlyEqual(αᵢⱼᴸ⁺, 1 / αⱼᵢᵁ⁺, tolerance=1e-10) return false end
            if !isNearlyEqual(αᵢⱼᵁ⁺, 1 / αⱼᵢᴸ⁺, tolerance=1e-10) return false end
        else
            if !isNearlyEqual(αᵢⱼᴸ⁻, 1 / αⱼᵢᵁ⁻) return false end
            if !isNearlyEqual(αᵢⱼᵁ⁻, 1 / αⱼᵢᴸ⁻) return false end
            if !isNearlyEqual(αᵢⱼᴸ⁺, 1 / αⱼᵢᵁ⁺) return false end
            if !isNearlyEqual(αᵢⱼᵁ⁺, 1 / αⱼᵢᴸ⁺) return false end
        end

    return true
end
```

## ユーティリティ関数

```julia
"""
    inner(𝒜)

Extract the interval matrix consisting of the inner intervals of the each element of the twofold interval matrix `𝒜`.
"""
function inner(
    𝒜::Matrix{TwofoldInterval{T}}
)::Matrix{Interval{T}} where {T <: Real}
    m, n = size(𝒜)
    𝒜⁻ = Matrix{Interval}(undef, m, n)

    for i = 1:m, j = 1:n
        𝒜⁻[i, j] = 𝒜[i, j][1]
    end

    return 𝒜⁻
end
```

```julia
"""
    outer(𝒜)

Extract the interval matrix consisting of the outer intervals of the each element of the twofold interval matrix `𝒜`.
"""
function outer(
    𝒜::Matrix{TwofoldInterval{T}}
)::Matrix{Interval{T}} where {T <: Real}
    m, n = size(𝒜)
    𝒜⁺ = Matrix{Interval}(undef, m, n)

    for i = 1:m, j = 1:n
        𝒜⁺[i, j] = 𝒜[i, j][2]
    end

    return 𝒜⁺
end
```

```julia
"""
    createTwofoldIntervalMatrix(𝒜⁻, 𝒜⁺)

Create a twofold interval matrix from the inner and outer interval matrices.
Given the two interval matrices must have the same size.
"""
function createTwofoldIntervalMatrix(
    𝒜⁻::Matrix{Interval{T}},
    𝒜⁺::Matrix{Interval{T}}
)::Matrix{TwofoldInterval{T}} where {T <: Real}
    if size(𝒜⁻) != size(𝒜⁺)
        throw(DimensionMismatch("The sizes of 𝒜⁻ and 𝒜⁺ must be the same."))
    end

    m, n = size(𝒜⁻)
    𝒜 = Matrix{TwofoldInterval}(undef, m, n)

    for i = 1:m, j = 1:n
        𝒜[i, j] = (𝒜⁻[i, j], 𝒜⁺[i, j])
    end

    return 𝒜
end
```

```julia
export isTwofoldIntervalPCM, inner, outer, createTwofoldIntervalMatrix
```
