# This file is auto-generated from interval_pcm.jmd.
# Do not edit this file manually.

module IntervalPCM

using IntervalArithmetic
using IntervalArithmetic.Symbols

include("../../nearly_equal/v1/nearly_equal.jl")
using .NearlyEqual

"""
    isIntervalPCM(A; allow_uncommon=false)

Check whether the given matrix `A` is an interval PCM.
"""
@inline function isIntervalPCM(
    A::Matrix{Interval{T}};
    allow_uncommon::Bool = false
)::Bool where {T <: Real}
    m, n = size(A)
    # Check if the matrix is square
    if m != n return false end

    for i = 1:n
        for j in (i+1):n
            if !iscommon(A[i,j])
                # non-common interval means like: ∅, (-∞, 1]
                if allow_uncommon
                    continue
                else
                    return false
                end
            end
            
            aᵢⱼᴸ = inf(A[i,j]); aᵢⱼᵁ = sup(A[i,j])
            aⱼᵢᴸ = inf(A[j,i]); aⱼᵢᵁ = sup(A[j,i])

            # Check if the lower bound is positive
            if aᵢⱼᴸ ≤ 0 || aⱼᵢᴸ ≤ 0 return false end

            # Check reciprocity
            if !isNearlyEqual(aᵢⱼᴸ, 1 / aⱼᵢᵁ) return false end
            if !isNearlyEqual(aᵢⱼᵁ, 1 / aⱼᵢᴸ) return false end
        end
    end

    # Check if the diagonal elements are [1, 1]
    for i in 1:n
        aᵢⱼᴸ = inf(A[i,i]); aᵢⱼᵁ = sup(A[i,i])
        if !isNearlyEqual(aᵢⱼᴸ, 1.0, tolerance=1e-10) return false end
        if !isNearlyEqual(aᵢⱼᵁ, 1.0, tolerance=1e-10) return false end
    end

    return true 
end

export isIntervalPCM

end
