# IntervalPCM

```julia
import Base: ∈, ∋
using IntervalArithmetic
using IntervalArithmetic.Symbols

include("../../nearly_equal/v1/nearly_equal.jl")
using .NearlyEqual

include("../../crisp_pcm/v1/crisp_pcm.jl")
using .CrispPCM

include("../../interval_weight_vector/v1/interval_weight_vector.jl")
using .IntervalWeightVector
```

## 区間 PCM の定義

$$
A = \left( A_{ij} \right)_{n \times n} = \left( \left[ a_{ij}^\mathrm{L}, a_{ij}^\mathrm{U} \right] \right)_{n \times n}
$$

- $n \times n$ 行列
- $a_{ij}^\mathrm{L} > 0, ~~ i, j \in N$
- $a_{ii}^\mathrm{L} = a_{ii}^\mathrm{U} = 1, ~~ i \in N$
- $a_{ij}^\mathrm{L} = 1/a_{ji}^\mathrm{U}, ~~ i, j \in N, ~ i \neq j$

```julia
"""
    isIntervalPCM(A; allow_uncommon=false)

Check whether the given matrix `A` is an interval PCM.
"""
@inline function isIntervalPCM(
    A::Matrix{Interval{T}};
    allow_uncommon::Bool = false,
    strict::Bool = false
)::Bool where {T <: Real}
    tolerance = strict ? 1e-10 : 1e-6

    m, n = size(A)
    # Check if the matrix is square
    if m != n return false end

    for i = 1:n
        for j in (i+1):n
            if !iscommon(A[i,j])
                # non-common interval means like: ∅, (-∞, 1]
                if allow_uncommon
                    continue
                else
                    return false
                end
            end
            
            aᵢⱼᴸ = inf(A[i,j]); aᵢⱼᵁ = sup(A[i,j])
            aⱼᵢᴸ = inf(A[j,i]); aⱼᵢᵁ = sup(A[j,i])

            # Check if the lower bound is positive
            if aᵢⱼᴸ ≤ 0 || aⱼᵢᴸ ≤ 0 return false end

            # Check reciprocity
            if !isNearlyEqual(aᵢⱼᴸ, 1 / aⱼᵢᵁ; tolerance=tolerance) return false end
            if !isNearlyEqual(aᵢⱼᵁ, 1 / aⱼᵢᴸ; tolerance=tolerance) return false end
        end
    end

    # Check if the diagonal elements are [1, 1]
    for i in 1:n
        aᵢⱼᴸ = inf(A[i,i]); aᵢⱼᵁ = sup(A[i,i])
        if !isNearlyEqual(aᵢⱼᴸ, 1.0; tolerance=1e-10) return false end
        if !isNearlyEqual(aᵢⱼᵁ, 1.0; tolerance=1e-10) return false end
    end

    return true 
end
```

## crisp PCM が区間 PCM に含まれるかどうかの判定

$A$ を crisp PCM, $B$ を区間 PCM とする. $A$ が $B$ に含まれるとは, $A_{ij} \in B_{ij}, ~ i, j \in N$ が成り立つことである.

```julia
"""
    isIntervalPCMContainingCrispPCM(A, B; strict = false)

Check whether the given interval PCM `B` contains the given crisp PCM `A`.
If `strict` is `true`, then the function returns `false` if `A` is not exactly equal to `B`.
Throws an `ArgumentError` if `A` is not a crisp PCM or `B` is not an interval PCM.
"""
function isIntervalPCMContainingCrispPCM(
    A::Matrix{T},
    B::Matrix{Interval{T}};
    strict::Bool = false
)::Bool where {T <: Real}
    if !isCrispPCM(A)
        throw(ArgumentError("The given matrix is not a crisp PCM."))
    end
    if !isIntervalPCM(B)
        throw(ArgumentError("The given matrix is not an interval PCM."))
    end

    tolerance = strict ? 1e-10 : 1e-6

    n = size(A, 1)

    for i = 1:n, j = 1:n
        aᵢⱼ = A[i,j]; bᵢⱼᴸ = inf(B[i,j]); bᵢⱼᵁ = sup(B[i,j])

        if bᵢⱼᴸ ≤ aᵢⱼ && aᵢⱼ ≤ bᵢⱼᵁ continue end

        if strict return false end

        if !isNearlyEqual(aᵢⱼ, bᵢⱼᴸ; tolerance=tolerance) && !isNearlyEqual(aᵢⱼ, bᵢⱼᵁ; tolerance=tolerance)
            return false
        end
    end

    return true
end
```

```julia
"""
    ∈(A, B)

Unicode alias for `isIntervalPCMContainingCrispPCM(A, B)`.
"""
∈(A::Matrix, B::Matrix{Interval})::Bool = isIntervalPCMContainingCrispPCM(A, B)
```

```julia
"""
    ∋(B, A)

Unicode alias for `isIntervalPCMContainingCrispPCM(A, B)`.
"""
∋(B::Matrix{Interval}, A::Matrix)::Bool = isIntervalPCMContainingCrispPCM(A, B)
```

## ユーティリティ関数

区間重要度ベクトル $W$ から $A_{ij} = W_i / W_j, ~ i, j \in N$ である区間 PCM $A = (A_{ij})$ を生成する.

```julia
"""
    intervalPCM(W)

Generate an interval PCM from the interval weight vector `W`.
Throws an `ArgumentError` if `W` is not an interval weight vector.
"""
function intervalPCM(
    W::Vector{Interval{T}}
)::Matrix{Interval{T}} where {T <: Real}
    if !isIntervalWeightVector(W)
        throw(ArgumentError("The given vector is not an interval weight vector."))
    end

    n = length(W)
    A = Matrix{Interval{T}}(undef, n, n)
    
    for i = 1:n, j = 1:n
        if i == j
            A[i,j] = 1.0..1.0
            continue
        end

        Wᵢ = W[i]; Wⱼ = W[j]
        wᵢᴸ = inf(Wᵢ); wᵢᵁ = sup(Wᵢ)
        wⱼᴸ = inf(Wⱼ); wⱼᵁ = sup(Wⱼ)

        aᵢⱼᴸ = wᵢᴸ / wⱼᵁ; aᵢⱼᵁ = wᵢᵁ / wⱼᴸ
        A[i,j] = aᵢⱼᴸ..aᵢⱼᵁ
    end

    return A
end
```

```julia
export isIntervalPCM, isIntervalPCMContainingCrispPCM, ∈, ∋, intervalPCM
```
